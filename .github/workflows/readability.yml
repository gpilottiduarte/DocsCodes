name: Readability Check
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  check-readability:
    name: Check Content Readability
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install textstat

      - name: Run Python readability checks
        run: |
          python -c """
          import textstat
          import glob
          import json
          import os
          import sys

          def analyze_file(filepath):
              try:
                  with open(filepath, 'r', encoding='utf-8') as f:
                      content = f.read()
              except Exception as e:
                  print(f'Error reading {filepath}: {e}')
                  return None
              flesch = textstat.flesch_reading_ease(content)
              grade = textstat.coleman_liau_index(content)
              # Estimar tempo de leitura: (nÃºmero de palavras / 200) * 60 segundos
              words = textstat.lexicon_count(content, removepunct=True)
              reading_speed_wpm = 200  # MÃ©dia de leitura (palavras por minuto)
              reading_time = (words / reading_speed_wpm) * 60  # Tempo em segundos
              return {
                  'flesch_reading_ease': flesch,
                  'grade_level': grade,
                  'reading_time': reading_time
              }
          
          def main():
              results = {}
              failed_files = []
              # Arquivos a serem ignorados
              ignore_files = ['CHANGELOG.md', 'LICENSE.md']
          
              for filepath in glob.glob('**/*.md', recursive=True):
                  filename = os.path.basename(filepath)
                  if filename not in ignore_files:
                      scores = analyze_file(filepath)
                      if scores:
                          results[filepath] = scores
                          # CritÃ©rios de falha
                          if scores['flesch_reading_ease'] < 60:
                              failed_files.append(f\"{filepath} (Flesch Score: {scores['flesch_reading_ease']:.1f})\")
                          if scores['grade_level'] > 12:
                              failed_files.append(f\"{filepath} (Grade Level: {scores['grade_level']:.1f})\")
          
              # Salvar relatÃ³rio
              with open('readability-report.json', 'w') as f:
                  json.dump(results, f, indent=2)
          
              # Imprimir resultados
              print('ðŸ“Š Readability Report')
              print('====================')
              for filepath, scores in results.items():
                  print(f\"\\nðŸ“„ {filepath}\")
                  print(f\"Flesch Score: {scores['flesch_reading_ease']:.1f}\")
                  print(f\"Grade Level: {scores['grade_level']:.1f}\")
                  print(f\"Reading Time: {scores['reading_time']:.1f} seconds\")
          
          main()
          """
          
                - name: Upload readability report
                  if: always()
                  uses: actions/upload-artifact@v3
                  with:
                    name: readability-report
                    path: readability-report.json
          
                - name: Comment on PR
                  if: github.event_name == 'pull_request'
                  uses: actions/github-script@v6
                  with:
                    script: |
                      const fs = require('fs');
                      const report = JSON.parse(fs.readFileSync('readability-report.json', 'utf8'));
                      let comment = '## ðŸ“Š Readability Report\n\n';
                      for (const [file, scores] of Object.entries(report)) {
                        comment += `### ${file}\n`;
                        comment += `- Flesch Score: ${scores.flesch_reading_ease.toFixed(1)}\n`;
                        comment += `- Grade Level: ${scores.grade_level.toFixed(1)}\n`;
                        comment += `- Reading Time: ${scores.reading_time.toFixed(1)} seconds\n\n`;
                      }
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });
